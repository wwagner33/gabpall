#
# Makefile for the Gamma Compiler
#

#YFLAGS	= -d

#CFLAGS	= -g

#LFLAGS	=

EXE = gm

MPI = mpicc

INC = include/const.h include/types.h include/fnc.h include/rtbag.h

SRC	= grammar.y scan.l main.c parser.c misc.c print.c check.c vars.c code.c printcode.c pattern.c 

OBJ	= grammar.o scan.o main.o parser.o misc.o print.o check.o vars.o code.o printcode.o pattern.o

OBJS = $(SRC:.c=.o)

## inluded by Wellington ##

#
# Debug build settings
#
DBGDIR = debug
DBGEXE = $(DBGDIR)/$(EXE)
DBGOBJS = $(addprefix $(DBGDIR)/, $(OBJS))
DBGCFLAGS = -g -O0 -DDEBUG

#
# Release build settings
#
RELDIR = release
RELEXE = $(RELDIR)/$(EXE)
RELOBJS = $(addprefix $(RELDIR)/, $(OBJS))
RELCFLAGS = -g -O3 -DNDEBUG


.PHONY: all clean prep debug release

all: prep release


# Debug rules
#
debug: $(DBGEXE)

$(DBGEXE): $(DBGOBJS)
	$(MPICC) $(DBGCFLAGS) $(OBJ) -o $(DBGEXE) $^

$(DBGDIR)/%.o: %.c
	$(MPICC) -c $(DBGCFLAGS) $(OBJ) -o $@ $<


## -- ##

#all: default

#default: clean gm

release: $(RELEXE)

#gm:$(OBJ) #mpicc $(CFLAGS) $(OBJ) -o $(EXE)
$(RELEXE): $(RELOBJS)
	$(MPICC) $(RELCFLAGS) $(OBJ) -o $(RELEXE) $^ 

scan.o	: y.tab.h

parser.o : $(INC)

misc.c	: $(INC)

grammar.y : $(INC) 

check.o : $(INC)

copy.o  : $(INC)

vars.o : $(INC) 

pattern.o : $(INC)

main.o : $(INC) include/vars.h

code.c : $(INC)

printcode.o: $(INC)

#Other rules

prep:
	mkdir -p $(DBGDIR) $(RELDIR)

clean:
	rm -f $(EXE) $(DBGEXE) *.o
